step "create-namespace" {
    name = "Create Namespace"
    properties = {
        Octopus.Action.TargetRoles = "pitstop"
    }

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                kubectl create namespace #{Project.Pitstop.Namespace}
                
                # Get existing namespaces
                Write-Host "Retrieving namespaces ..."
                $namespaces = (kubectl get namespaces -o JSON | ConvertFrom-Json)
                
                # Check to see if namespace exists
                if ($null -eq ($namespaces.Items | Where-Object {$_.metadata.name -eq $OctopusParameters["Project.Pitstop.Namespace"]}))
                {
                	# Create the namespace
                    Write-Host "Namespace #{Project.Pitstop.Namespace} doesn't exist, creating ..."
                    kubectl create namespace $OctopusParameters["Project.Pitstop.Namespace"]
                }
                else
                {
                	Write-Host "Namespace #{Project.Pitstop.Namespace} already exists, moving on ..."
                }
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}

step "deploy-kubernetes-yaml" {
    name = "Deploy Kubernetes YAML"
    properties = {
        Octopus.Action.TargetRoles = "pitstop"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        properties = {
            Octopus.Action.GitRepository.FilePathFilters = "src/deployment/web-app.yaml"
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "src/deployment/web-app.yaml"
            Octopus.Action.KubernetesContainers.Namespace = "pitstop-#{Octopus.Environment.Name | ToLower}"
            Octopus.Action.Script.ScriptSource = "GitRepository"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "github"
            image = "octopusdeploy/worker-tools:6.4.0-ubuntu.22.04"
        }

        packages "pitstop-personal-webapp" {
            acquisition_location = "NotAcquired"
            feed = "github"
            package_id = "adamoctoclose/pitstop-personal-webapp"
            properties = {
                Extract = "False"
                Purpose = "DockerImageReference"
                SelectionMode = "immediate"
            }
        }
    }
}